

- change the queues name not to be hardcoded  (maybe thorught a setup or env variable)

- check if it is better to ack by myself after consume from a message queue instead of automatically ack alone after consume (ack = true/false)

- instead of adding the first url inside fetcher and start the queues from the fetcher, parser and etc, maybe i should add 
a service of rabbimq_initlizer that will run first and start the queues and add the first url 

- should i add cleanups? for example in fetcher

- how should the setup of creating db , queues and more should be.

- let redis handle the duplicates and maybe check if the last time edited is not the same as mongodb so still send it
to the fetcher (throught the message queue).

- in fetcher: instead of passing  response.text to the function and then doing bs(response.text) just pass the soup or url?

- if im doint docker compose down and then compose up should the queues be empty or with the data from before ?
- add gitignore

- check my yaml vs Tomer yaml

- add .env 



- add links as chunks:
def send_links_to_parser(self, links, batch_size=100):
        """Send links to parser queue in batches"""
        parser_queue = "parser_queue"
        self.channel.queue_declare(queue=parser_queue, durable=True)
        
        for i in range(0, len(links), batch_size):
            batch = links[i:i + batch_size]
            try:
                self.channel.basic_publish(
                    exchange='',
                    routing_key=parser_queue,
                    body=json.dumps(batch),
                    properties=pika.BasicProperties(delivery_mode=2)
                )
            except Exception as e:
                self.logger.error(f"Failed to send batch to parser: {e}")
                
def __init__(self, rabbitmq_uri, storage_dir="./storage/html_files", 
                 batch_size=100, max_retries=5, retry_delay=5):
        """Make configuration more flexible"""
        self.batch_size = batch_size
        self.max_retries = max_retries
        self.retry_delay = retry_delay
